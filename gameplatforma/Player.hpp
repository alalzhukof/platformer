#include <SFML/Graphics.hpp>
#ifndef PLAYER_HPP
#define PLAYER_HPP
using namespace sf;

/**
 * @brief Класс, представляющий игрока.
 *
 * Этот класс содержит всю информацию и методы, необходимые для управления игроком в игре.
 */
class Player
{
public:
    float dx, dy;       ///< Скорость игрока по осям X и Y
    FloatRect rect;     ///< Прямоугольник, представляющий границы игрока
    bool onGround, rig; ///< Флаги состояния: на земле и направлен вправо
    Sprite sprite;      ///< Спрайт игрока
    float curFrame;     ///< Текущий кадр анимации
    int l;              ///< Количество жизней игрока
    bool life;          ///< Флаг состояния жизни игрока

    /**
     * @brief Конструктор игрока.
     *
     * Инициализирует объект игрока, устанавливая начальные параметры и текстуру.
     *
     * @param image Текстура для спрайта игрока.
     */
    Player(Texture &image);

    /**
     * @brief Обновляет состояние объекта.
     *
     * Эта функция обновляет положение и состояние объекта на основе прошедшего времени.
     * Обрабатывает движение, гравитацию, столкновения, анимацию и состояние жизни объекта.
     *
     * @param time Прошедшее время с момента последнего обновления.
     */
    void update(float time);

    /**
     * @brief Обрабатывает столкновения объекта с игровыми тайлами.
     *
     * Эта функция проверяет столкновения объекта с различными тайлами на карте и соответствующим образом обновляет его положение и состояние.
     *
     * @param dir Направление проверки столкновений (0 для горизонтальных, 1 для вертикальных).
     */
    void Collision(int dir);
};
#endif